version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      # Add parameter here
      workflow_id:
        type: string
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            # Your code here
            aws cloudformation delete-stack --stack-name "uda-frontend-stack-<<parameters.workflow_id>>"
            aws cloudformation delete-stack --stack-name "uda-backend-stack-<<parameters.workflow_id>>"
            exit 1

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      # Add parameter here
      workflow_id:
        type: string     
    steps:
      - run:
          name: Revert migrations
          # Add when this will run
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS=$(curl -H "token: cc617a5f-16d6-4cf2-b341-92a478b4e9a8" --request GET https://api.memstash.io/values/migration_<<parameters.workflow_id>>)
            if(( $SUCCESS==1 )); 
            then
              cd ~/project/backend
              npm install
              #  Add revert code here. You can find this in the Getting Started section.
              npm run migrations:revert
            fi
            exit 1
          when: on_fail
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Install update dependencies
          command: |
            cd frontend
            npm i
            npm audit fix
            #npm run lint # doesn't work
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm run build
            ls -l
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Install dependencies and lint code
          command: |
            cd backend
            npm i
            #npm run lint # doesn't work
      - run:
          name: Back-end build
          command: |
            cd backend
            npm run build
            ls -l # just want to see the list of files
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [frontend-build]
      # Your job code here
      - run: 
          name: test front end
          command: |
            cd frontend
            npm test
                
  test-backend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [backend-build]
      # Your job code here
      - run: 
          name: Test Back End
          command: |
            cd backend
            npm test
            
  scan-frontend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # - attach_workspace:
      #      at: ~/
      # Restore from cache
      - restore_cache:
          keys: [backend-build]
      # Your job code here
      - run:
          command: |
            cd frontend
            npm install oauth-sign
      - run: 
          name: Fix critical dependencies
          command: |
            cd frontend
            npm audit fix --audit-level=critical --force

  scan-backend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # - attach_workspace:
      #     at: ./
      # Restore from cache
      - restore_cache:
          keys: [backend-build]
      # Your job code here
      - run: 
          name: Fix critical dependency at back end
          command: |
            cd backend
            npm audit fix --audit-level=critical --force

  deploy-infrastructure:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install tar utility
          command: |
            yum install -y tar gzip

      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udacity-project3-backend \
              --stack-name "uda-backend-stack-${CIRCLE_WORKFLOW_ID}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID}"  
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udacity-project3-frontend \
              --stack-name "uda-frontend-stack-${CIRCLE_WORKFLOW_ID}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID}"  

      # Variables in bash: https://ryanstutorials.net/bash-scripting-tutorial/bash-variables.php
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            echo "[all]" > inventory.txt #Creates new file
            aws ec2 describe-instances \
             --filters "Name=tag:project,Values=udacity-project3-backend" \
             --query 'Reservations[*].Instances[*].PublicDnsName' \
             --output text >> .circleci/ansible/inventory.txt # Appends results to inventory.txt
             cat inventory.txt

      - run:
          name: Persist backend ip to storage
          # Got token from memstash.io page.  Storage is temporary (that's why it is free)
          no_output_timeout: 15m #time out after 15 minutes
          command: |
            backend_dns=$(aws ec2 describe-instances \
             --filters "Name=tag:project,Values=udacity-project3-backend" \
             --query 'Reservations[*].Instances[*].PublicDnsName' \
             --output text)
            curl -H "Content-Type: text/plain" -H "token: 27705889-3d05-4084-b0fa-a1fbe209f3f1" \
            --request PUT --data "$backend_dns" https://api.memstash.io/values/backend_dns
            echo $backend_dns

      - run:
          name: Test memstash stored ip
          command: |
            result=$(curl -H "token: 27705889-3d05-4084-b0fa-a1fbe209f3f1" --request GET https://api.memstash.io/values/backend_dns)
            echo "$result"

      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      # Here's where you will add some code to rollback on failure
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID}"      

  configure-infrastructure:
    docker:
      # Docker image here that supports Ansible
      - image: circleci/python
    steps:
      # Checkout code from git
      - checkout
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints: [63:01:4c:08:9c:09:4e:03:fa:b1:40:43:37:e7:54:eb]
      # attach workspace
      - attach_workspace:
          at: ~/
      - restore_cache:  # ensure this step occurs *before* installing dependencies
          key: python-packages-{{ .Branch }}
      - run:
          # you need awscli for the destroy-environment command
          name: Install dependencies
          command: |
            # Your code here
            pip install -U ansible
            pip install awscli
            
            # sudo apt install tar gzip
            # curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            # unzip awscliv2.zip
            # sudo ./aws/install
            python --version
      # - run:
      #     name: Simulate Error
      #     command: return 1
      - run:
          name: Setup .env file
          # QUESTION: why is this done here versus inside Ansible script?
          command: |
            cd backend
            echo ENVIROMENT=$ENVIROMENT > ".env"
            echo TYPEORM_CONNECTION=$TYPEORM_CONNECTION >> ".env"
            echo TYPEORM_MIGRATIONS_DIR=$TYPEORM_MIGRATIONS_DIR >> ".env"
            echo TYPEORM_ENTITIES=$TYPEORM_ENTITIES >> ".env"
            echo TYPEORM_MIGRATIONS=$TYPEORM_MIGRATIONS >> ".env"
            echo TYPEORM_HOST=$TYPEORM_HOST >> ".env"
            echo TYPEORM_PORT=$TYPEORM_PORT >> ".env"
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> ".env"
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> ".env"
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> ".env"
            cat .env
      - run:
          name: Configure server
          no_output_timeout: 15m #time out after 15 minutes
          command: |
            # Your code here
            cd .circleci/ansible
            ansible-playbook -i inventory.txt configure-server.yml
      #Here's where you will add some code to rollback on failure
      - persist_to_workspace:
           root: ~/
           paths:
             - project/backend/.env
      - save_cache:
          key: python-packages-{{ .Branch }}
          paths:
            - "/usr/local/bin"
            - "/usr/local/lib/python3.9/site-packages"
      # - destroy-environment:
      #     workflow_id: "${CIRCLE_WORKFLOW_ID}"      

  run-migrations:
    docker:
      # Docker image here that supports NodeJS
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      - restore_cache:
          keys: [backend-build]
      # attach workspace
      - attach_workspace:
          at: ~/
      - run:
          name: Run migrations
          no_output_timeout: 15m
          command: |
            # Your code here
            cd backend
            #npm install
            #npm audit fix
            #npm audit fix --audit-level=critical --force
            touch migrations_log.txt
            npm run migrations >> migrations_log.txt
            cat migrations_log.txt
      - run:
          name: Send migration results to memstash
          command: |
            # Your code here
            cd backend
            if grep -q "has been executed successfully" migrations.txt; then 
              curl -H "Content-Type: text/plain" -H "token: cc617a5f-16d6-4cf2-b341-92a478b4e9a8" \
              --request PUT --data "1" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID}
            else
              curl -H "Content-Type: text/plain" -H "token: cc617a5f-16d6-4cf2-b341-92a478b4e9a8" \
              --request PUT --data "0" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID}
            fi
     # Here's where you will add some code to rollback on failure
      - revert-migrations:
          workflow_id: "${CIRCLE_WORKFLOW_ID}"      

  deploy-frontend:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Install dependencies
          no_output_timeout: 15m
          command: |
            # your code here
            yum install -y tar gzip
            rpm -ql # trying to locate where packages are installed
      - run:
          name: Get backend url
          command: |
            # your code here
            BACKEND_DNS=$(curl -H "token: 27705889-3d05-4084-b0fa-a1fbe209f3f1" --request GET https://api.memstash.io/values/backend_dns)
            export API_URL="http://${BACKEND_DNS}:3030"
            echo "${API_URL}"
      - run:
          name: Build frontend objects
          command: |
            # your code here
            cd frontend
            npm run build
            ls
      - run:
          name: Move front end files to S3 candidate bucket
          command: |
            cd frontend
            aws s3 sync dist s3://udapeople-${CIRCLE_WORKFLOW_ID} --recursive
      # Here's where you will add some code to rollback on failure
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID}" 
      - revert-migrations:
          workflow_id: "${CIRCLE_WORKFLOW_ID}"     
                    
  deploy-backend:
    docker:
      # Docker image here that supports Ansible
      - image: circleci/python
    steps:
      # Checkout code from git
      - checkout
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints: [63:01:4c:08:9c:09:4e:03:fa:b1:40:43:37:e7:54:eb]
      # attach workspace
      - attach_workspace:
          at: ~/
      - restore_cache:  # ensure this step occurs *before* installing dependencies
          key: python-package-{{ .Branch }}
      # - run:
      #     name: Install dependencies
      #     command: |
      #       # your code here
      #       pip install -U ansible
      #       sudo apt install tar gzip
      #       curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
      #       unzip awscliv2.zip
      #       sudo ./aws/install
      - run:
          name: Deploy backend
          command: |
            # your code here
            cd .circleci/ansible
            ansible-playbook -i inventory.txt deploy-backend.yml

      # Here's where you will add some code to rollback on failure
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID}"
      - revert-migrations:
          workflow_id: "${CIRCLE_WORKFLOW_ID}"  

  # smoke-test:
  #   docker:
  #     # Lightweight Docker image
  #     - image: alpine:latest 
  #   steps:
  #     # Checkout code from git
  #     - checkout
  #     - run:
  #         name: Install dependencies
  #         command: |
  #           # your code here
  #     - run:
  #         name: Get backend url
  #         command: |
  #           # your code here
  #     - run:
  #         name: Backend smoke test.
  #         command: |
  #           # your code here
  #     - run:
  #         name: Frontend smoke test.
  #         command: |
  #           # your code here
  #     # Here's where you will add some code to rollback on failure  

  # cloudfront-update:
  #   docker:
  #     # Docker image here that supports AWS CLI
  #     - image: amazon/aws-cli
  #   steps:
  #     # Checkout code from git
  #     - checkout
  #     - run:
  #         name: Install dependencies
  #         no_output_timeout: 15m
  #         command: |
  #           # your code here
  #           yum install -y tar
  #           yum install -y gzip
  #     - run:
  #         name: Update cloudfront distribution
  #         command: |
  #           # your code here
  #     # Here's where you will add some code to rollback on failure  

# cleanup:
#     docker:
#       # Docker image here
#       - image: amazon/aws-cli
#     steps:
#       # Checkout code from git
#       - checkout
#       - run:
#           name: Install tar utility
#           no_output_timeout: 15m
#           command: |
#             yum install -y tar gzip
#       - run:
#           name: Get old stack workflow id
#           command: |
#             # your code here
#             export OldWorkflowID="the id here"
#             export STACKS=[] #put the list of stacks here
#       - run:
#           name: Remove old stacks and files
#           command: |
#             if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
#             then
#               # your code here
#             fi
            

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          # filters:
          #   branches:
          #     only: [main]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
         requires: [configure-infrastructure]
      # - deploy-frontend:
      #     requires: [run-migrations]
      # - deploy-backend:
      #     requires: [run-migrations]
      # - smoke-test:
      #     requires: [deploy-backend, deploy-frontend]
      # - cloudfront-update:
      #     requires: [smoke-test]
      # - cleanup:
      #     requires: [cloudfront-update]