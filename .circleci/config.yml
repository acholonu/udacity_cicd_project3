version: 2.1

# Think of orbs as libraries or packages for CircleCI
orbs:
  slack: circleci/slack@4.4.4
  #aws-cli: circleci/aws-cli@2.0.3
  #node: circleci/node@4.7.0


# These are custom functions that I use in other jobs
commands:
  # Function 1
  notify_slack_error:
    steps:
      - slack/notify:
          event: fail
          template: basic_fail_1 # build in formating template to display failure
          mentions: "@ugochi" #if you want to target a particular person
          channel: alerts # Slack channel to display to

  # Function 2
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      # Add parameter here
      workflow_id:
        type: string
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            # Your code here
            echo s3://udapeople-<<parameters.workflow_id>>/
            echo uda-frontend-stack-<<parameters.workflow_id>>
            
            aws s3 rm --recursive s3://udapeople-<<parameters.workflow_id>>/
            #aws s3 rb s3://udapeople-<<parameters.workflow_id>> --force
            aws cloudformation delete-stack --stack-name "uda-frontend-stack-<<parameters.workflow_id>>"
            aws cloudformation delete-stack --stack-name "uda-backend-stack-<<parameters.workflow_id>>"
            aws cloudformation delete-stack --stack-name uda-prometheus-server-stack

  # Function 3
  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      # Add parameter here
      workflow_id:
        type: string     
    steps:
      - run:
          name: Revert migrations
          # Add when this will run
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS=$(curl -H "token: cc617a5f-16d6-4cf2-b341-92a478b4e9a8" --request GET https://api.memstash.io/values/migration_<<parameters.workflow_id>>)
            if(( $SUCCESS==1 )); 
            then
              cd ~/project/backend
              npm install
              #  Add revert code here. You can find this in the Getting Started section.
              npm run migrations:revert
            fi
            exit 0
          when: on_fail
            
jobs:
  build-frontend:
    # So my executor here is docker
    docker:
      #- image: circleci/node:13.8.0 #legacy images start with circleci generation
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Install update dependencies
          command: |
            cd frontend
            npm i
            npm update
            npm audit fix
            #npm run lint # doesn't work
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm run build
            ls -alh # What is in the frontend 
            ls -alh dist # What is in the distribution
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

      - notify_slack_error

  build-backend:
    docker:
      #- image: circleci/node:13.8.0
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]

      - run:
          name: Install dependencies and lint code
          command: |
            cd backend
            npm i
            #npm run lint # doesn't work

      - run:
          name: Back-end build
          command: |
            cd backend
            npm run build
            ls -l # just want to see the list of files

      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

      - notify_slack_error

  test-frontend:
    docker:
      # Docker image here
      #- image: circleci/node:13.8.0
      - image: cimg/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [frontend-build]
          
      # Your job code here
      - run: 
          name: test front end
          no_output_timeout: 15m
          command: |
            cd frontend
            npm i
            npm test
                
  test-backend:
    docker:
      # Docker image here
      #- image: circleci/node:13.8.0
      - image: cimg/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [backend-build]

      # Your job code here
      - run: 
          name: Test Back End
          no_output_timeout: 15m 
          command: |
            cd backend
            npm test

      - notify_slack_error
            
  scan-frontend:
    docker:
      # Docker image here
      #- image: circleci/node:13.8.0
      - image: cimg/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [scan-frontend]

      # Your job code here
      - run:
          command: |
            cd frontend
            npm install oauth-sign

      - run: 
          name: Fix critical dependencies
          command: |
            cd frontend
            npm install
            npm update
            npm audit fix --audit-level=critical --force

      - save_cache:
          paths: [frontend/node_modules]
          key: scan-frontend

      - notify_slack_error
    

  scan-backend:
    docker:
      # Docker image here
      #- image: circleci/node:13.8.0
      - image: cimg/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [scan-backend]
      # Your job code here
      - run: 
          name: Fix critical dependency at back end
          command: |
            cd backend
            npm install oauth-sign
            npm install
            npm update
            npm audit fix --audit-level=critical --force

      - save_cache:
          paths: [backend/node_modules]
          key: scan-backend

      - notify_slack_error


  deploy-infrastructure:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install tar utility
          command: |
            yum install -y tar gzip

      - run:
          name: Deploy Prometheus Server
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/prometheus_server.yml \
              --stack-name uda-prometheus-server-stack

      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udacity-project3-backend \
              --stack-name "uda-backend-stack-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  

      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udacity-project3-frontend \
              --stack-name "uda-frontend-stack-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"

      # Variables in bash: https://ryanstutorials.net/bash-scripting-tutorial/bash-variables.php
      - run:
          name: Add prometheus server ip to ansible inventory
          command: |
            aws ec2 describe-instances \
             --filters "Name=tag:Name,Values=prometheus-server" \
             --query 'Reservations[*].Instances[*].PublicDnsName' \
             --output text >> .circleci/ansible/inventory.txt # Appends results to inventory.txt
            cat .circleci/ansible/inventory.txt

      - run:
          name: Add backend ip to ansible inventory
          command: |
            echo "[backend]" >> .circleci/ansible/inventory.txt
            aws ec2 describe-instances \
             --filters "Name=tag:project,Values=udacity-project3-backend" \
             --query 'Reservations[*].Instances[*].PublicDnsName' \
             --output text >> .circleci/ansible/inventory.txt # Appends results to inventory.txt
             cat .circleci/ansible/inventory.txt

      - run:
          name: Persist backend ip to storage
          # Got token from memstash.io page.  Storage is temporary (that's why it is free)
          no_output_timeout: 15m #time out after 15 minutes
          command: |
            backend_dns=$(aws ec2 describe-instances \
             --filters "Name=tag:project,Values=udacity-project3-backend" \
             --query 'Reservations[*].Instances[*].PublicDnsName' \
             --output text)
            curl -H "Content-Type: text/plain" -H "token: 27705889-3d05-4084-b0fa-a1fbe209f3f1" \
            --request PUT --data "$backend_dns" https://api.memstash.io/values/backend_dns
            echo $backend_dns

      - run:
          name: Test memstash stored ip
          command: |
            result=$(curl -H "token: 27705889-3d05-4084-b0fa-a1fbe209f3f1" --request GET https://api.memstash.io/values/backend_dns)
            echo "$result"

      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
            - project/backend/
      
      - notify_slack_error

      # Here's where you will add some code to rollback on failure
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"      


  configure-infrastructure:
    docker:
      # Docker image here that supports Ansible
      #- image: circleci/python
      - image: cimg/python:3.10.0
    steps:
      # Checkout code from git
      - checkout
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints: [63:01:4c:08:9c:09:4e:03:fa:b1:40:43:37:e7:54:eb]
      # attach workspace
      - attach_workspace:
          at: ~/

      - run:
          # you need awscli for the destroy-environment command
          name: Install dependencies
          command: |
            # Your code here
            pip install -U ansible
            pip install pyyaml
            pip install awscli
            python --version

      # - run:
      #     name: Simulate Error
      #     command: return 1
      - run:
          name: Setup .env file
          # QUESTION: why is this done here versus inside Ansible script?
          command: |
            cd backend
            echo ENVIROMENT=$ENVIROMENT > ".env"
            echo TYPEORM_CONNECTION=$TYPEORM_CONNECTION >> ".env"
            echo TYPEORM_MIGRATIONS_DIR=$TYPEORM_MIGRATIONS_DIR >> ".env"
            echo TYPEORM_ENTITIES=$TYPEORM_ENTITIES >> ".env"
            echo TYPEORM_MIGRATIONS=$TYPEORM_MIGRATIONS >> ".env"
            echo TYPEORM_HOST=$TYPEORM_HOST >> ".env"
            echo TYPEORM_PORT=$TYPEORM_PORT >> ".env"
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> ".env"
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> ".env"
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> ".env"
            cat .env

      - run:
          name: Configure Backend Server
          no_output_timeout: 15m #time out after 15 minutes
          command: |
            # Your code here
            cd .circleci/ansible
            ansible-playbook -i inventory.txt configure-server.yml
            cat inventory.txt

      #Resource1: https://able.bio/rhett/how-to-set-and-get-environment-variables-in-python--274rgt5
      #Resource2: https://askubuntu.com/questions/529919/how-to-fix-not-a-valid-identifier-error-after-setting-environment-variables
      - run:
          name: Set up slack configuration
          command: |
            cd .circleci/ansible/roles/configure-prometheus-alertmanager/files
            # Not sure if the file should be .txt or .yml
            export slack_api_url=$SLACK_WEBHOOK_NEW
            python slack_config.py

      - run:
          name: Configure Prometheus Server
          no_output_timeout: 15m #time out after 15 minutes
          command: |
            #Your code here
            cd .circleci/ansible
            ansible-playbook -i inventory.txt configure-prometheus.yml
            cat inventory.txt

      - persist_to_workspace:
           root: ~/
           paths:
             - project/backend/.env
      
      - notify_slack_error
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"      


  run-migrations:
    docker:
      # Docker image here that supports NodeJS
      #- image: circleci/node:13.8.0
      - image: cimg/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      - restore_cache:
          keys: [backend-build]

      # attach workspace
      - attach_workspace:
          at: ~/

      - run:
          name: Run migrations
          no_output_timeout: 15m
          command: |
            # Your code here
            cd backend
            touch migrations_log.txt
            npm run migrations >> migrations_log.txt
            cat migrations_log.txt

      - run:
          name: Send migration results to memstash
          command: |
            # Your code here
            cd backend
            if grep -q "has been executed successfully" migrations.txt; then 
              curl -H "Content-Type: text/plain" -H "token: cc617a5f-16d6-4cf2-b341-92a478b4e9a8" \
              --request PUT --data "1" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID:0:7}
            else
              curl -H "Content-Type: text/plain" -H "token: cc617a5f-16d6-4cf2-b341-92a478b4e9a8" \
              --request PUT --data "0" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID:0:7}
            fi
     # Here's where you will add some code to rollback on failure
      - notify_slack_error
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
      - revert-migrations:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
         
  # Deploys the static web site (front-end of the application)
  deploy-frontend:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run:
          # Explains the -y for the yum install command: 
          # https://stackoverflow.com/questions/44715458/build-docker-image-fail-exiting-on-user-command
          name: Install dependencies
          no_output_timeout: 15m
          command: |
            # your code here
            yum install gzip tar python3-pip curl -y
            curl -sL https://rpm.nodesource.com/setup_10.x | bash -
            yum install nodejs npm -y
            cd frontend
            npm install
            npm audit fix

      - run:
          name: Get backend url
          command: |
            # your code here
            BACKEND_DNS=$(curl -H "token: 27705889-3d05-4084-b0fa-a1fbe209f3f1" --request GET https://api.memstash.io/values/backend_dns)
            export API_URL="http://${BACKEND_DNS}:3030" 

            echo ${BACKEND_DNS}
            echo -n ${API_URL}
            echo ENVIRONMENT=production > "frontend/.env"
            echo NODE_ENV=production >> "frontend/.env"
            echo -n "API_URL=${API_URL}" >> "frontend/.env"
            cat frontend/.env

      - run:
          name: Build frontend objects
          command: |
            # your code here
            cd frontend
            cat .env
            npm run build:prod
            ls -lha

      - run:
          # difference btw aws cp and aws sync: https://stackoverflow.com/questions/64728076/aws-s3-cp-vs-aws-s3-sync-behavior-and-cost
          name: Move front end files to S3 candidate bucket
          command: |
            cd frontend
            cp favicon.ico dist/favicon.ico # resolves error that I am missing this icon
            cp favicon.ico dist/images/favicon.ico # resolves error that I am missing this icon

            cd dist
            ls -lha
            # This should copy to S3 bucket
            aws s3 sync . s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --acl public-read --delete
            
      # Here's where you will add some code to rollback on failure
      - notify_slack_error
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}" 
      - revert-migrations:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"     

  # Starts the backend server for the app (application backend)
  # Time outs
  deploy-backend:
    docker:
      - image: cimg/python:3.10.0-node
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - attach_workspace:
          at: ~/
      - add_ssh_keys:
          fingerprints: [63:01:4c:08:9c:09:4e:03:fa:b1:40:43:37:e7:54:eb]
      - run:
          name: Check Versions
          command: |
            node -v
            python3 --version
            pip3 --version

      - run:
          name: Install dependencies
          command: |
            pip3 install awscli
            pip3 install ansible
      
      # Why I am doing the tar this way:
      # https://stackoverflow.com/questions/20318852/tar-file-changed-as-we-read-it 
      - run:
          name: Compress build objects to tar File
          command: |
            # Save to top level folder of project
            tar -C backend -czvf backend.tar.gz . #Change directory to backend, then tar
            ls

      - run:
          name: Save compressed files into Ansible folder
          command: |
            ls
            sudo cp backend.tar.gz .circleci/ansible/roles/deploy/files/backend.tar.gz

      - run:
          name: Deploy Backend
          no_output_timeout: 15m
          command: |
            cd .circleci/ansible
            ansible-playbook -i inventory.txt deploy-backend.yml

      - notify_slack_error
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
      - revert-migrations:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"

  smoke-test-frontend:
    docker:
      # Lightweight Docker image
      #- image: alpine:latest
      - image: alpine:latest 
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install dependencies
          command: |
            # your code here
            apk add --update curl tar gzip python3 py3-pip
            pip3 install --upgrade pip
            pip3 install awscli

      - run:
          name: Frontend smoke test.
          command: |
            # your code here
            #URL="https://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-${AWS_DEFAULT_REGION}.amazonaws.com/index.html"
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-${AWS_DEFAULT_REGION}.amazonaws.com"
            
            #Check that you can connect and it has expected text
            if curl $URL | grep "Welcome"
            then
              echo "SUCCESS: Connected to frontend using the S3 URL: $URL"
              return 0
            else
              echo "FAILURE: Failed to connect to frontend URL: $URL"
              return 1
            fi

      # Here's where you will add some code to rollback on failure
      - notify_slack_error
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
      - revert-migrations:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}" 


  smoke-test-backend:
    docker:
      # Lightweight Docker image
      #- image: alpine:latest
      - image: alpine:latest 
    steps:
      # Checkout code from git
      - checkout
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            # your code here
            apk add --update curl tar gzip python3 py3-pip
            pip3 install --upgrade pip
            pip3 install awscli

      - run:
          name: Get backend smoke test
          command: |
            # your code here
            BACKEND_DNS=$(curl -H "token: 27705889-3d05-4084-b0fa-a1fbe209f3f1" --request GET https://api.memstash.io/values/backend_dns)
            API_URL="http://$BACKEND_DNS:3030/api/status"
            BACKEND_URL=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query "Reservations[*].Instances[*].[PublicDnsName]" \
              --output text)

            URL="http://$BACKEND_URL:3030/api/status"

            #Check you can connect to backend
            if curl $URL | grep '"status":"ok"'
            then
              echo "SUCCESS: Connected to backend EC2 instance: $URL"
              return 0
            else
              echo "FAILURE: Failed to connect to backend EC2 instance: $URL"
              return 1
            fi

      # Here's where you will add some code to rollback on failure
      - notify_slack_error
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
      - revert-migrations:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"  


  cloudfront-update:
  # This stage promotes the candidate application to be the production app.
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install dependencies
          no_output_timeout: 15m
          command: |
            # your code here
            yum install -y tar
            yum install -y gzip
            aws --version

      - run:
          # https://awscli.amazonaws.com/v2/documentation/api/latest/reference/cloudformation/deploy.html
          name: Update cloudfront distribution
          command: |
            # your code here

            aws cloudformation deploy \
              --template-file .circleci/files/cloudfront.yml \
              --tags project=udacity-project3-promotion \
              --stack-name uda-cloudfront-stack \
              --region "${AWS_DEFAULT_REGION}" \
              --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --capabilities "CAPABILITY_IAM" "CAPABILITY_NAMED_IAM"
              

      # Here's where you will add some code to rollback on failure
      - notify_slack_error  
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
      - revert-migrations:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"      

  cleanup:
    docker:
      # Docker image here
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install tar utility
          no_output_timeout: 15m
          command: |
            yum install -y tar gzip
      - run:
          name: Get old stack workflow id
          command: |
            # your code here
            export OldWorkflowID=$(aws cloudformation \
              list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
              --no-paginate --output text) 

            echo "OldWorkflowID = ${OldWorkflowID}"

            export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
              --stack-status-filter CREATE_COMPLETE --no-paginate --output text))

            echo "STACKS: ${STACKS}"

      - run:
          name: Remove old stacks and files
          command: |
            echo "@@@OldWorkflowID: ${OldWorkflowID}\n CIRCLE_WORKFLOW_ID: ${CIRCLE_WORKFLOW_ID}\n STACKS: ${STACKS[@]}"
            
            if "${STACKS[@]}" != "${OldWorkflowID}"
            then
              aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
              aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
              aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
            fi
            
workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [main]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
         requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations, deploy-frontend]
      - smoke-test-frontend:
          requires: [deploy-backend]
      - smoke-test-backend:
          requires: [smoke-test-frontend]
      - cloudfront-update:
          requires: [smoke-test-backend]
      - cleanup:
          requires: [cloudfront-update]