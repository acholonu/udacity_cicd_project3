- name: "upgrade packages"
  become: yes
  apt:
    upgrade: "yes"

- name: "update apt packages"
  become: yes
  apt:
    update_cache: yes

- name: "install dependencies"
  become: yes
  apt:
    name: ["nodejs", "npm"]
    state: latest
    update_cache: yes

- name: Creates directory 
  file:
    path: /home/ubuntu/backend
    state: directory

- name: "Copy backend tar.gz file and unzip it"
  become: yes
  unarchive:
    src: backend.tar.gz
    dest: /home/ubuntu/backend
    
# pm2 will automatically restart your application if it crashes
# pm2 will keep a log of your unhandled exceptions /home/<user>/.pm2/logs/app-err.log.
# learn more: https://www.digitalocean.com/community/tutorials/how-to-use-pm2-to-setup-a-node-js-production-environment-on-an-ubuntu-vps
# - name: Build Backend again
#   become: true
#   shell: |
#     cd /home/ubuntu/backend
#     npm i
#     npm install -g npm-install-peers
#     npm-install-peers
#     npm audit fix --audit-level=critical --force
#     npm run build #Not sure if needed

# Running things asynchronously
# Resource: https://docs.ansible.com/ansible/latest/user_guide/playbooks_async.html
- name: Start backend
  become: true
  shell: |
    cd /home/ubuntu/backend

    # start backend app, `watch` if files change (`ignore` file changes in the node_modules).  Restart if 
    # files have change.  Put `time` in logs.  `Name` this process uda-backend
    # need the dash -- before start (at the end of the command) so that pm2 will stop parsing the flags as its own.  Instead the start command
    # will be attached to the npm command (i.e. npm start)

    pm2 start npm --watch --ignore-watch="node_modules" --time --name uda-backend  -- start

    cd dist
    pm2 start main.js --watch --time --name main_app
    
    # List process that pm2 is running and monitoring
    pm2 ls

    # list the last 20 logs that pm2 has registered
    pm2 logs lines 20 #lists the last 20 logs
    
  async: 45
  poll: 0
  environment:
    Environment:
      ENVIRONMENT: "{{ lookup('env', 'ENVIRONMENT') }}"
      TYPEORM_CONNECTION: "{{ lookup('env', 'TYPEORM_CONNECTION') }}"
      TYPEORM_ENTITIES: "{{ lookup('env', 'TYPEORM_ENTITIES') }}"
      TYPEORM_HOST: "{{ lookup('env', 'TYPEORM_HOST') }}"
      TYPEORM_PORT: "{{ lookup('env', 'TYPEORM_PORT') }}"
      TYPEORM_USERNAME: "{{ lookup('env', 'TYPEORM_USERNAME') }}"
      TYPEORM_PASSWORD: "{{ lookup('env', 'TYPEORM_PASSWORD') }}"
      TYPEORM_DATABASE: "{{ lookup('env', 'TYPEORM_DATABASE') }}"